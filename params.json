{"name":"Django-cities-light","body":"django-cities-light -- *Simple django-cities alternative*\r\n=========================================================\r\n\r\nThis add-on provides models and commands to import country/city data into your\r\ndatabase.\r\nThe data is pulled from `GeoNames\r\n<http://www.geonames.org/>`_ and contains:\r\n\r\n  - country names\r\n  - optionnal city names\r\n\r\nSpatial query support is not required by this application.\r\n\r\nThis application is very simple and is useful if you want to make a simple\r\naddress book for example. If you intend to build a fully featured spatial\r\ndatabase, you should use\r\n`django-cities\r\n<https://github.com/coderholic/django-cities>`_.\r\n\r\nInstallation\r\n------------\r\n\r\nInstall django-cities-light::\r\n\r\n    pip install django-cities-light\r\n\r\nOr the development version::\r\n\r\n    pip install -e git+git@github.com:yourlabs/django-cities-light.git#egg=cities_light\r\n\r\nAdd `cities_light` to your `INSTALLED_APPS`.\r\n\r\nYou may not need the city model and database table. A project like\r\nbetspire.com doesn't need it for instance. So the City model will be made\r\n'abstract' if this setting is set as such::\r\n\r\n    CITIES_LIGHT_ENABLE_CITY=False\r\n\r\nNow, run syncdb, it will only create tables for models that are not disabled::\r\n\r\n    ./manage.py syncdb\r\n\r\nData update\r\n-----------\r\n\r\nFinnaly, populate your database with command::\r\n\r\n    ./manage.py cities_light\r\n\r\nThis command is well documented, consult the help with::\r\n    \r\n    ./manage.py help cities_light\r\n\r\nFiltering data import\r\n---------------------\r\n\r\nAn example is worth 1000 words: if you want to import only cities from France,\r\nUSA and Belgium you could do as such::\r\n\r\n    import cities_light\r\n\r\n    def filter_city_import(sender, items, **kwargs):\r\n        if items[8] not in ('FR', 'US', 'BE'):\r\n            raise cities_light.InvalidItems()\r\n\r\n    cities_light.signals.city_items_pre_import.connect(filter_city_import)\r\n\r\nNote: this signal gets a list rather than a City instance for performance reasons.\r\n\r\nConfigure logging\r\n-----------------\r\n\r\nThis command is made to be compatible with background usage like from cron, to\r\nkeep the database fresh. So it doesn't do direct output. To get output from\r\nthis command, simply configure a handler and formatter for `cities_light`\r\nlogger. For example::\r\n\r\n    LOGGING = {\r\n        'version': 1,\r\n        'disable_existing_loggers': False,\r\n        'formatters': {\r\n            'simple': {\r\n                'format': '%(levelname)s %(message)s'\r\n            },\r\n        },\r\n        'handlers': {\r\n            'console':{\r\n                'level':'DEBUG',\r\n                'class':'logging.StreamHandler',\r\n                'formatter': 'simple'\r\n            },\r\n        },\r\n        'loggers': {\r\n            'cities_light': {\r\n                'handlers':['console'],\r\n                'propagate': True,\r\n                'level':'DEBUG',\r\n            },\r\n            # also use this one to see SQL queries\r\n            'django': {\r\n                'handlers':['console'],\r\n                'propagate': True,\r\n                'level':'DEBUG',\r\n            },\r\n        }\r\n    }\r\n\r\nAjax autocomplete\r\n-----------------\r\n\r\ndjango-autocomplete-light\r\n~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nIf `autocomplete_light` from `django-autocomplete-light\r\n<https://github.com/yourlabs/django-autocomplete-light/>`_, you\r\nhave two channels and a widget for City ModelChoiceField that has two\r\nautocompletes: one for the country, and one for the city that is filtered by\r\nthe selected country. Example usage::\r\n\r\n    from django import forms\r\n\r\n    import autocomplete_light\r\n    from cities_light.models import City\r\n    from cities_light.widgets import CityAutocompleteWidget\r\n\r\n    from models import Address\r\n\r\n    class AddressForm(forms.ModelForm):\r\n        city = forms.ModelChoiceField(City.objects.all(),\r\n            widget=CityAutocompleteWidget('CityChannel', max_items=1))\r\n                                              \r\n        class Meta:\r\n            model = Address\r\n            widgets = autocomplete_light.get_widgets_dict(Address, \r\n                autocomplete_exclude=('city'))\r\n\r\ndjango-ajax-selects\r\n~~~~~~~~~~~~~~~~~~~\r\n\r\nIf `ajax_selects` from\r\n`django-ajax-selects\r\n<https://github.com/crucialfelix/django-ajax-selects>`_, you\r\nshould have two new channels usable right away:\r\n\r\n  - `cities_light_country`\r\n  - `cities_light_city`\r\n\r\nIdeas for contribution\r\n----------------------\r\n\r\n  - django-modeltranslation support and alternateNames.txt\r\n  - country flags support\r\n\r\nI might implement this in the next project or refactor of\r\nmy projects that use django-cities-light. In the mean time, \r\nthis app just works because it's so simple. I wonder if there's a bug ....\r\n","tagline":"A Country and an (optionnal) City model and simple features","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}